{
  "entities": {
    "Template": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Template",
      "type": "object",
      "description": "Represents a pre-designed app template.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the template."
        },
        "name": {
          "type": "string",
          "description": "Name of the template."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the template."
        },
        "category": {
          "type": "string",
          "description": "Category of the template (e.g., Business, Education, Entertainment)."
        },
        "previewImageURL": {
          "type": "string",
          "description": "URL of the preview image for the template.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "category",
        "previewImageURL"
      ]
    },
    "Project": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Project",
      "type": "object",
      "description": "Represents a user's app project based on a selected template.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the project."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Project)"
        },
        "templateId": {
          "type": "string",
          "description": "Reference to Template. (Relationship: Template 1:N Project)"
        },
        "name": {
          "type": "string",
          "description": "Name of the project (user-defined)."
        },
        "creationDate": {
          "type": "string",
          "description": "Date when the project was created.",
          "format": "date-time"
        },
        "lastModifiedDate": {
          "type": "string",
          "description": "Date when the project was last modified.",
          "format": "date-time"
        },
        "configuration": {
          "type": "string",
          "description": "JSON string that stores the configuration for the project UI elements"
        }
      },
      "required": [
        "id",
        "userId",
        "templateId",
        "name",
        "creationDate",
        "lastModifiedDate",
        "configuration"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the MobiCraft Studio.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the user."
        },
        "registrationDate": {
          "type": "string",
          "description": "Date when the user registered.",
          "format": "date-time"
        },
        "photoURL": {
          "type": "string",
          "description": "URL for the user's profile picture.",
          "format": "uri"
        },
        "favoriteCocktail": {
          "type": "string",
          "description": "The slug of the user's favorite cocktail."
        }
      },
      "required": [
        "id",
        "email"
      ]
    },
    "ContentSuggestion": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContentSuggestion",
      "type": "object",
      "description": "Represents an AI-powered content suggestion for the user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the content suggestion."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N ContentSuggestion)"
        },
        "originalContent": {
          "type": "string",
          "description": "The original content provided by the user."
        },
        "suggestedContent": {
          "type": "string",
          "description": "The AI-powered content suggestion."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the suggestion was generated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "projectId",
        "originalContent",
        "suggestedContent",
        "timestamp"
      ]
    },
    "RecipeNote": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RecipeNote",
      "type": "object",
      "description": "Represents a user's personal notes for a specific recipe.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the note, typically the recipe ID."
        },
        "userId": {
          "type": "string",
          "description": "The ID of the user who owns this note."
        },
        "recipeId": {
          "type": "string",
          "description": "The ID of the cocktail recipe these notes are for."
        },
        "brands": {
          "type": "string",
          "description": "User's preferred spirit brands for this recipe."
        },
        "notes": {
          "type": "string",
          "description": "User's personal adjustments and notes."
        },
        "sharedWith": {
          "type": "string",
          "description": "People the user has shared this cocktail with."
        },
        "photoUrl": {
          "type": "string",
          "description": "URL of the user's personal photo for this cocktail.",
          "format": "uri"
        },
        "updatedAt": {
          "type": "string",
          "description": "The timestamp when the note was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "recipeId",
        "updatedAt"
      ]
    },
    "UserInventoryItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserInventoryItem",
      "type": "object",
      "description": "Represents a single item in a user's bar inventory.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the ingredient (e.g., Vodka, Lime Juice)."
        },
        "level": {
          "type": "number",
          "description": "The fill level of the bottle, from 0 to 100."
        },
        "size": {
          "type": "string",
          "description": "The size of the bottle (e.g., 750ml, 1L)."
        }
      },
      "required": [
        "name",
        "level",
        "size"
      ]
    },
    "Cocktail": {
      "title": "Cocktail",
      "type": "object",
      "description": "Represents a cocktail recipe.",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The ID of the user who submitted this recipe."
        },
        "name": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "baseSpirit": {
          "type": "string"
        },
        "style": {
          "type": "string"
        },
        "ingredients": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "directions": {
          "type": "string"
        },
        "tools": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "history": {
          "type": "string"
        },
        "glassware": {
          "type": "string"
        },
        "fact": {
          "type": "string"
        }
      },
      "required": [
        "userId",
        "name",
        "slug",
        "description",
        "baseSpirit",
        "style",
        "ingredients",
        "directions",
        "tools",
        "history",
        "glassware",
        "fact"
      ]
    },
    "UserLearning": {
      "title": "UserLearning",
      "type": "object",
      "description": "Represents a user's learning progress in the Mixology Lab.",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The ID of the user."
        },
        "totalQuizzesTaken": {
          "type": "number",
          "description": "Total number of quiz questions answered."
        },
        "correctQuizAnswers": {
          "type": "number",
          "description": "Number of quiz questions answered correctly."
        },
        "puzzlesSolved": {
          "type": "number",
          "description": "Number of 'What Am I?' puzzles solved."
        }
      },
      "required": [
        "userId"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/templates/{templateId}",
        "definition": {
          "entityName": "Template",
          "schema": {
            "$ref": "#/backend/entities/Template"
          },
          "description": "Stores pre-designed app templates.",
          "params": [
            {
              "name": "templateId",
              "description": "Unique identifier for the template."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user data. Only the authenticated user can access their own document.",
          "params": [
            {
              "name": "userId",
              "description": "Unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/projects/{projectId}",
        "definition": {
          "entityName": "Project",
          "schema": {
            "$ref": "#/backend/entities/Project"
          },
          "description": "Stores user's app projects. Includes 'userId' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "Unique identifier for the user."
            },
            {
              "name": "projectId",
              "description": "Unique identifier for the project."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/projects/{projectId}/contentSuggestions/{contentSuggestionId}",
        "definition": {
          "entityName": "ContentSuggestion",
          "schema": {
            "$ref": "#/backend/entities/ContentSuggestion"
          },
          "description": "Stores AI-powered content suggestions for a project. Includes 'projectId' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "Unique identifier for the user."
            },
            {
              "name": "projectId",
              "description": "Unique identifier for the project."
            },
            {
              "name": "contentSuggestionId",
              "description": "Unique identifier for the content suggestion."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/recipeNotes/{recipeNoteId}",
        "definition": {
          "entityName": "RecipeNote",
          "schema": {
            "$ref": "#/backend/entities/RecipeNote"
          },
          "description": "Stores a user's personal notes for a specific recipe. Only the owning user can access their notes.",
          "params": [
            {
              "name": "userId",
              "description": "The user's unique ID."
            },
            {
              "name": "recipeNoteId",
              "description": "The unique ID for the recipe note, often matching the recipe slug."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/inventory/{inventoryItemId}",
        "definition": {
          "entityName": "UserInventoryItem",
          "schema": {
            "$ref": "#/backend/entities/UserInventoryItem"
          },
          "description": "Stores items in a user's bar inventory. Only accessible by the owner.",
          "params": [
            {
              "name": "userId",
              "description": "The user's unique ID."
            },
            {
              "name": "inventoryItemId",
              "description": "The unique ID for the inventory item."
            }
          ]
        }
      },
      {
        "path": "/cocktails/{cocktailId}",
        "definition": {
          "entityName": "Cocktail",
          "schema": {
            "$ref": "#/backend/entities/Cocktail"
          },
          "description": "Stores all cocktail recipes, both pre-defined and user-submitted. The cocktailId is the slug.",
          "params": [
            {
              "name": "cocktailId",
              "description": "The unique ID for the cocktail, which is its URL-friendly slug."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/learning/{learningId}",
        "definition": {
          "entityName": "UserLearning",
          "schema": {
            "$ref": "#/backend/entities/UserLearning"
          },
          "description": "Stores a user's learning progress. Only accessible by the owner. The documentId will be a singleton, 'progress'.",
          "params": [
            {
              "name": "userId",
              "description": "The user's unique ID."
            },
            {
              "name": "learningId",
              "description": "A singleton document ID, e.g., 'progress'."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure security, scalability, and ease of debugging, adhering to the principles of Authorization Independence, Clarity of Intent, DBAC, and QAPs. Authorization Independence is achieved through denormalization, specifically by including the 'userId' within the Project and ContentSuggestion documents, avoiding hierarchical `get()` calls in security rules.  Structural Segregation separates user-owned data into dedicated collections, ensuring a homogeneous security posture. Access Modeling follows consistent patterns: Private Data uses Path-Based ownership (`/users/{userId}/projects/{projectId}`, `/users/{userId}/recipeNotes/{recipeNoteId}`, and `/users/{userId}/inventory/{inventoryItemId}`), and the structure supports required QAPs. Specifically:\n\n*   **Templates:** Public and queryable.  No personalized data is present. Can be listed safely.\n*   **User Data:** All user data is stored within the `/users/{userId}` path, ensuring only the authenticated user can access their data.\n*   **Projects:**  Stored under the user's path, ensuring only the owning user can access them.  Includes the `userId` property for redundant security.\n*   **ContentSuggestions:**  Stored under the user's project, ensuring only the owning user can access them.  Includes the `projectId` for redundant security.\n*   **RecipeNotes:** Stored under the user's path, ensuring only the owning user can access them. The `recipeNoteId` will often be the slug of the recipe for easy lookup.\n*   **Inventory:** Stored under the user's path, ensuring only the owning user can access their own inventory items.\n*   **Cocktails:** A top-level collection for all recipes. They are public to all users but contain a `userId` field to identify the original author.\n*   **UserLearning:** A singleton document stored under the user's path to track their progress in the Mixology Lab.\n\nThe explicit state modeling uses timestamps. The schema is predictable with static keys.  Naming conventions are consistently applied (e.g., `userId`, `projectId`).\n\nThis approach allows for secure list operations and atomic operations while maintaining data integrity and a clear authorization model."
  }
}

    