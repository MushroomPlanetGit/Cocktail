/**
 * @fileoverview Firestore Security Rules for MobiCraft Studio.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private data while allowing public read access to shared content.
 *
 * Data Structure:
 * - /templates/{templateId}: Public templates.
 * - /users/{userId}: User profiles, accessible only to the owning user.
 * - /users/{userId}/projects/{projectId}: User-created projects.
 * - /users/{userId}/projects/{projectId}/contentSuggestions/{contentSuggestionId}: AI-powered content suggestions for projects.
 * - /users/{userId}/recipeNotes/{recipeNoteId}: User's notes on cocktail recipes.
 * - /users/{userId}/inventory/{inventoryItemId}: User's bar inventory items.
 * - /cocktails/{cocktailId}: Publicly available cocktail recipes with owner attribution.
 *
 * Key Security Decisions:
 * - Templates and Cocktails are publicly readable but writes are restricted to authenticated owners where specified.
 * - User data and their associated Projects, ContentSuggestions, RecipeNotes, and Inventory items are strictly private and accessible only to the owning user.
 * - Listing of user subcollections is allowed only to the owning user.
 * - Data validation is limited to relational integrity checks for `create` and `update` operations.
 *
 * Denormalization for Authorization:
 * - Projects and ContentSuggestions include the `userId` and `projectId` respectively to enable authorization checks without requiring hierarchical `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to templates, but restricts write access.
     * @path /templates/{templateId}
     * @allow (get, list): Any user can read template data.
     * @deny (create, update, delete): No user can create, update, or delete templates through the client.
     * @principle Public read, restricted write. Templates are managed server-side.
     */
    match /templates/{templateId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to read, update, and delete their own user document.
     * @path /users/{userId}
     * @allow (get, update, delete): Authenticated user with matching {userId} can perform these operations.
     * @allow (create): Authenticated user can create their own user document if the {userId} matches their auth.uid.
     * @deny (get, update, delete): Any other user trying to access this document.
     * @deny (create): Creating a user document with a mismatched user ID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own projects.
     * @path /users/{userId}/projects/{projectId}
     * @allow (get, list, create, update, delete): Authenticated user with matching {userId} can perform these operations.
     * @deny (get, list, create, update, delete): Any other user trying to access this document.
     * @principle Enforces document ownership for project data.
     */
    match /users/{userId}/projects/{projectId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage content suggestions for their own projects.
     * @path /users/{userId}/projects/{projectId}/contentSuggestions/{contentSuggestionId}
     * @allow (get, list, create, update, delete): Authenticated user with matching {userId} can perform these operations.
     * @deny (get, list, create, update, delete): Any other user trying to access this document.
     * @principle Enforces document ownership for content suggestion data.
     */
    match /users/{userId}/projects/{projectId}/contentSuggestions/{contentSuggestionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.projectId == projectId;
      allow update: if isExistingOwner(userId) && request.resource.data.projectId == resource.data.projectId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own recipe notes.
     * @path /users/{userId}/recipeNotes/{recipeNoteId}
     * @allow (get, list, create, update, delete): Authenticated user with matching {userId} can perform these operations.
     * @deny (get, list, create, update, delete): Any other user trying to access this document.
     * @principle Enforces document ownership for recipe notes.
     */
    match /users/{userId}/recipeNotes/{recipeNoteId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own inventory items.
     * @path /users/{userId}/inventory/{inventoryItemId}
     * @allow (get, list, create, update, delete): Authenticated user with matching {userId} can perform these operations.
     * @deny (get, list, create, update, delete): Any other user trying to access this document.
     * @principle Enforces document ownership for inventory items.
     */
    match /users/{userId}/inventory/{inventoryItemId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to cocktails, but restricts write access to the owner.
     * @path /cocktails/{cocktailId}
     * @allow (get, list): Any user can read cocktail data.
     * @allow (create): Only the author can create cocktails, and the userId must match.
     * @allow (update, delete): Only the author can update or delete cocktails.
     * @deny (create, update, delete): Non-owners cannot create, update, or delete cocktails.
     * @principle Public read, owner-only write.
     */
    match /cocktails/{cocktailId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}