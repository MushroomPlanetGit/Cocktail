/**
 * @fileoverview Firestore Security Rules for MobiCraft Studio.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private data, while allowing public read access to shared content.
 *
 * Data Structure:
 * - /templates/{templateId}: Public templates.
 * - /users/{userId}: User profiles, accessible only by the owning user.
 * - /users/{userId}/projects/{projectId}: Projects owned by a user.
 * - /users/{userId}/projects/{projectId}/contentSuggestions/{contentSuggestionId}: AI-powered content suggestions for a specific project.
 * - /users/{userId}/recipeNotes/{recipeNoteId}: User's personal notes for recipes.
 * - /users/{userId}/inventory/{inventoryItemId}: User's personal inventory.
 * - /cocktails/{cocktailId}: Publicly accessible cocktail recipes with owner attribution.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to the /templates and /cocktails collections.
 * - All write operations on user-owned data require authentication and ownership validation.
 * - The 'userId' field is used for authorization and must match the authenticated user's UID.
 *
 * Denormalization for Authorization:
 * - Projects and ContentSuggestions include the 'userId' field for independent authorization.
 * - Cocktails include the 'userId' field to identify the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to templates.
     * @path /templates/{templateId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read, no write access.
     */
    match /templates/{templateId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to user documents to the authenticated user.
     * @path /users/{userId}
     * @allow (create) If the user ID in the path matches the authenticated user's ID.
     * @allow (get, update, delete) If the user ID in the path matches the authenticated user's ID.
     * @deny (list) Users cannot list all user documents.
     * @deny (create) If the user ID in the path does not match the authenticated user's ID.
     * @deny (update, delete) If the user ID in the path does not match the authenticated user's ID or if the document doesn't exist.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to project documents to the owning user.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) If the user ID in the path matches the authenticated user's ID.
     * @allow (get, list, update, delete) If the user ID in the path matches the authenticated user's ID and the document exists.
     * @deny (create) If the user ID in the path does not match the authenticated user's ID or if the projectId does not match request.resource.data.id
     * @deny (update, delete) If the user ID in the path does not match the authenticated user's ID or if the document doesn't exist.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/projects/{projectId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to content suggestion documents to the owning user.
     * @path /users/{userId}/projects/{projectId}/contentSuggestions/{contentSuggestionId}
     * @allow (create) If the user ID in the path matches the authenticated user's ID.
     * @allow (get, list, update, delete) If the user ID in the path matches the authenticated user's ID and the document exists.
     * @deny (create) If the user ID in the path does not match the authenticated user's ID.
     * @deny (update, delete) If the user ID in the path does not match the authenticated user's ID or if the document doesn't exist.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/projects/{projectId}/contentSuggestions/{contentSuggestionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.projectId == projectId;
      allow update: if isExistingOwner(userId) && request.resource.data.projectId == resource.data.projectId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to recipe note documents to the owning user.
     * @path /users/{userId}/recipeNotes/{recipeNoteId}
     * @allow (create) If the user ID in the path matches the authenticated user's ID.
     * @allow (get, list, update, delete) If the user ID in the path matches the authenticated user's ID and the document exists.
     * @deny (create) If the user ID in the path does not match the authenticated user's ID.
     * @deny (update, delete) If the user ID in the path does not match the authenticated user's ID or if the document doesn't exist.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/recipeNotes/{recipeNoteId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to inventory documents to the owning user.
     * @path /users/{userId}/inventory/{inventoryItemId}
     * @allow (create) If the user ID in the path matches the authenticated user's ID.
     * @allow (get, list, update, delete) If the user ID in the path matches the authenticated user's ID and the document exists.
     * @deny (create) If the user ID in the path does not match the authenticated user's ID.
     * @deny (update, delete) If the user ID in the path does not match the authenticated user's ID or if the document doesn't exist.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/inventory/{inventoryItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to cocktail recipes, but restricts write access to owners only.
     * @path /cocktails/{cocktailId}
     * @allow (get, list)
     * @allow (create) if the userId field matches the authenticated user's ID.
     * @allow (update, delete) if the userId field matches the authenticated user's ID and the document exists.
     * @deny (create) if the userId field does not match the authenticated user's ID.
     * @deny (update, delete) if the userId field does not match the authenticated user's ID or if the document does not exist.
     * @principle Public read, owner-only writes.
     */
    match /cocktails/{cocktailId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingCocktailOwner(request.auth.uid);
      allow delete: if isExistingCocktailOwner(request.auth.uid);
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document based on the path.
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  // Helper function to check ownership and document existence for update/delete operations.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  // Helper function to check ownership of cocktail documents for update/delete operations.
  function isExistingCocktailOwner(userId) {
      return isSignedIn() && resource != null && resource.data.userId == userId;
  }
}