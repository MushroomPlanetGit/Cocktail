/**
 * @fileoverview Firestore Security Rules for MobiCraft Studio.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for projects and content suggestions,
 * while allowing public read access to templates. All user-specific data is nested under
 * /users/{userId} to ensure only the authenticated user can access their own data.
 * Authorization Independence is achieved by including 'userId' within the Project and
 * ContentSuggestion documents.
 *
 * Data Structure:
 * - /templates/{templateId}: Publicly readable collection of app templates.
 * - /users/{userId}: Stores user data, accessible only to the authenticated user.
 * - /users/{userId}/projects/{projectId}: Stores user's projects, accessible only to the owning user.
 * - /users/{userId}/projects/{projectId}/contentSuggestions/{contentSuggestionId}: Stores AI-powered
 *   content suggestions, accessible only to the owning user.
 *
 * Key Security Decisions:
 * - Templates are publicly readable.
 * - User listing is disallowed.
 * - All write operations on user-owned data require authentication and ownership validation.
 * - The `userId` field is denormalized in `Project` and `ContentSuggestion` documents for
 *   authorization independence.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to templates. Only the admin can manage templates.
     * @path /templates/{templateId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Publicly readable data.
     */
    match /templates/{templateId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to user documents to the authenticated user.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their own document.
     * @allow (get, list, update, delete) User with matching ID can read and modify their own document.
     * @deny (create) User cannot create a document with an ID different from their own.
     * @deny (get, list, update, delete) Other users cannot access this document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to project documents to the owning user.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) User with matching userId can create a project under their user path.
     * @allow (get, list, update, delete) User with matching userId can read and modify their own project.
     * @deny (create) User cannot create a project with an userId different from their own.
     * @deny (get, list, update, delete) Other users cannot access this project.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/projects/{projectId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Restricts access to content suggestion documents to the owning user.
     * @path /users/{userId}/projects/{projectId}/contentSuggestions/{contentSuggestionId}
     * @allow (create) User with matching userId can create a content suggestion under their project.
     * @allow (get, list, update, delete) User with matching userId can read and modify their own content suggestion.
     * @deny (create) User cannot create a content suggestion with an userId different from their own.
     * @deny (get, list, update, delete) Other users cannot access this content suggestion.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/projects/{projectId}/contentSuggestions/{contentSuggestionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.projectId == projectId;
      allow update: if isExistingOwner(userId) && request.resource.data.projectId == projectId;
      allow delete: if isExistingOwner(userId) && request.resource.data.projectId == projectId;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && request.auth.uid == userId && resource != null;
    }
  }
}